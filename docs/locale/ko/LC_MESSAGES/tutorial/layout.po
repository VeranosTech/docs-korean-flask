# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-24 16:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorial/layout.rst:2
msgid "Project Layout"
msgstr "프로젝트 레이아웃"

#: ../../tutorial/layout.rst:4
msgid "Create a project directory and enter it:"
msgstr "프로젝트 디렉터리를 만들고 들어간다:"

#: ../../tutorial/layout.rst:11
msgid ""
"Then follow the :doc:`installation instructions </installation>` to set "
"up a Python virtual environment and install Flask for your project."
msgstr ""
":doc:`설치 지시 </installation>`\ 에 따라 "
"파이썬 가상환경을 깔고 플라스크를 설치한다."

#: ../../tutorial/layout.rst:14
msgid ""
"The tutorial will assume you're working from the ``flask-tutorial`` "
"directory from now on. The file names at the top of each code block are "
"relative to this directory."
msgstr ""
"이 튜토리얼에서는 지금부터 ``flask-tutorial`` 디렉토리 안에서 작업한다고 가정한다. "
"각 코드 블럭 위의 파일 이름은 이 디렉토리에 대해 상대 경로이다. "

#: ../../tutorial/layout.rst:20
msgid "A Flask application can be as simple as a single file."
msgstr "플라스크 애플리케이션은 가장 단순하게는 하나의 파일로 만들 수 있다."

#: ../../tutorial/layout.rst:22
msgid "``hello.py``"
msgstr ""

#: ../../tutorial/layout.rst:34
msgid ""
"However, as a project gets bigger, it becomes overwhelming to keep all "
"the code in one file. Python projects use *packages* to organize code "
"into multiple modules that can be imported where needed, and the tutorial"
" will do this as well."
msgstr ""
"하지만 프로젝트가 커지면 모든 코드를 하나의 파일에 담기가 어려워진다. "
"파이썬 프로젝트에서 *패키지*\ 를 사용하면 코드를 여러개의 모듈로 조직화한 다음 "
"필요할 때 임포트할 수 있다. 튜토리얼도 이 방식을 사용한다. "

#: ../../tutorial/layout.rst:39
msgid "The project directory will contain:"
msgstr "프로젝트 디렉터리 내용은 다음과 같다:"

#: ../../tutorial/layout.rst:41
msgid "``flaskr/``, a Python package containing your application code and files."
msgstr "``flaskr/``, 애플리케이션 코드와 파일을 포함하는 파이썬 패키지""

#: ../../tutorial/layout.rst:43
msgid "``tests/``, a directory containing test modules."
msgstr "``tests/``, 테스트 모듈을 포함하는 디렉터리"

#: ../../tutorial/layout.rst:44
msgid ""
"``venv/``, a Python virtual environment where Flask and other "
"dependencies are installed."
msgstr "``venv/``, 플라스크와 다른 의존성 패키지가 설치된 파이썬 가상환경"

#: ../../tutorial/layout.rst:46
msgid "Installation files telling Python how to install your project."
msgstr "프로젝트를 어떻게 설치하는지 파이썬에게 지시하는 설치 파일"

#: ../../tutorial/layout.rst:47
msgid ""
"Version control config, such as `git`_. You should make a habit of using "
"some type of version control for all your projects, no matter the size."
msgstr ""
"`git`_\ 과 같은 버전 관리 설정. 크든 작은 모든 프로젝트에 버전 관리를 "
"사용하는 습관을 가져야 한다."

#: ../../tutorial/layout.rst:50
msgid "Any other project files you might add in the future."
msgstr "나중에 추가하게 될 다른 프로젝트 파일"

#: ../../tutorial/layout.rst:54
msgid "By the end, your project layout will look like this:"
msgstr "다 끝나면 다음과 같아진다.:"

#: ../../tutorial/layout.rst:87
msgid ""
"If you're using version control, the following files that are generated "
"while running your project should be ignored. There may be other files "
"based on the editor you use. In general, ignore files that you didn't "
"write. For example, with git:"
msgstr ""
"만약 버전 관리를 사용하고 있으면 프로젝트 실행중에 생기는 다음 파일들을 "
"무시하도록 설정해야 한다. 사용하고 있는 에디터에 따라서는 추가적으로 파일을 "
"무시해야 할 수도 있다. 보통은 개발자가 직접 작성하지 않은 파일은 무시한다. "
"예를 들어 git에서는 다음 파일들이다.:" 

#: ../../tutorial/layout.rst:92
msgid "``.gitignore``"
msgstr ""

#: ../../tutorial/layout.rst:110
msgid "Continue to :doc:`factory`."
msgstr ":doc:`factory`\ 으로 계속."

