# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-08 10:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../patterns/packages.rst:4
msgid "Larger Applications"
msgstr "대규모 애플리케이션"

#: ../../patterns/packages.rst:6
msgid "Imagine a simple flask application structure that looks like this::"
msgstr "다음과 같은 간단한 플라스크 애플리케이션 구조가 있다고 하자::"

#: ../../patterns/packages.rst:18
msgid ""
"While this is fine for small applications, for larger applications it's a"
" good idea to use a package instead of a module. The :ref:`tutorial "
"<tutorial>` is structured to use the package pattern, see the "
":gh:`example code <examples/tutorial>`."
msgstr ""
"이 구조는 소규모 애플리케이션에는 좋지만 대규모 애플리케이션에서는 모듈 대신 "
"패키지를 쓰는 것이 좋은 생각이다. :ref:`tutorial <tutorial>`\ 은 패키지 방식을 사용하고 있다. "
":gh:`example code <examples/tutorial>`\ 도 참조한다."

#: ../../patterns/packages.rst:24
msgid "Simple Packages"
msgstr "간단한 패키지"

#: ../../patterns/packages.rst:26
msgid ""
"To convert that into a larger one, just create a new folder "
":file:`yourapplication` inside the existing one and move everything below"
" it. Then rename :file:`yourapplication.py` to :file:`__init__.py`.  "
"(Make sure to delete all ``.pyc`` files first, otherwise things would "
"most likely break)"
msgstr ""
"이 구조를 대규모 애플리케이션용으로 바꾸려면 이 폴더에 :file:`yourapplication` 폴더를 만들고 "
"그 안으로 파일을 옮긴다. 그리고 :file:`yourapplication.py` 파일을 :file:`__init__.py`\ 로 "
"이름을 바꾼다. (그 전에 모든 ``.pyc`` 파일을 삭제해야 한다. 그렇지 않으면 오동작이 발생한다.)"

#: ../../patterns/packages.rst:31 ../../patterns/packages.rst:105
msgid "You should then end up with something like that::"
msgstr "그러면 다음과 같은 구조가 된다.::"

#: ../../patterns/packages.rst:44
msgid ""
"But how do you run your application now?  The naive ``python "
"yourapplication/__init__.py`` will not work.  Let's just say that Python "
"does not want modules in packages to be the startup file.  But that is "
"not a big problem, just add a new file called :file:`setup.py` next to "
"the inner :file:`yourapplication` folder with the following contents::"
msgstr ""
"이제는 애플리케이션을 어떻게 시작할까? "
"단순히 ``python yourapplication/__init__.py``\ 라고 하면 실행되지 않는다. "
"파이썬에서는 패키지 안의 모듈은 시작파일이 될 수 없기 때문이다. "
"이 문제는 쉽게 해결할 수 있다. :file:`yourapplication` 폴더안에 다음 내용으로 "
":file:`setup.py` 파일을 만든다."

#: ../../patterns/packages.rst:61
msgid ""
"In order to run the application you need to export an environment "
"variable that tells Flask where to find the application instance::"
msgstr ""
"애플리케이션을 실행하러면 애플리케이션 인수턴스를 찾을 수 있는 위치를 "
"플라스크에게 알려주는 환경변수를 지정해야 한다.::"

#: ../../patterns/packages.rst:66
msgid ""
"If you are outside of the project directory make sure to provide the "
"exact path to your application directory. Similarly you can turn on the "
"development features like this::"
msgstr ""
"만약 프로젝트 디렉터리 바깥에 있다면 애플리케이션 디렉터리에 대한 정확한 "
"패스 정보를 제공해야 한다. 개발 서버 기능은 다음처럼 켤 수 있다.::"

#: ../../patterns/packages.rst:72
msgid ""
"In order to install and run the application you need to issue the "
"following commands::"
msgstr ""
"애플리케이션을 설치하고 실행하려면 다음 명령을 내린다.::"

#: ../../patterns/packages.rst:78
msgid ""
"What did we gain from this?  Now we can restructure the application a bit"
" into multiple modules.  The only thing you have to remember is the "
"following quick checklist:"
msgstr ""
"이렇게 하면 뭐가 좋은가? 이제 우리는 애플리케이션에 여러개의 모듈을 넣을 수 있다. "
"다음과 같은 점만 기억하면 된다.::"

#: ../../patterns/packages.rst:82
msgid ""
"the `Flask` application object creation has to be in the "
":file:`__init__.py` file.  That way each module can import it safely and "
"the `__name__` variable will resolve to the correct package."
msgstr ""
":file:`__init__.py` 파일 안에 `Flask` 애플리케이션 객체가 생성되어 있어야 한다. "
"각 모듈은 이 객체를 임포트할 수 있다.  `__name__`  변수로 패키지를 파악할 수 있다."

#: ../../patterns/packages.rst:85
msgid ""
"all the view functions (the ones with a :meth:`~flask.Flask.route` "
"decorator on top) have to be imported in the :file:`__init__.py` file. "
"Not the object itself, but the module it is in. Import the view module "
"**after the application object is created**."
msgstr ""
"모든 뷰 함수(:meth:`~flask.Flask.route` 데코레이터를 가진 함수)는 "
":file:`__init__.py` 파일에 임포트되어 있어야 한다. "
"객체 자체는 임포트할 필요가 없고 모듈만 임포트하면 된다. "
"딘 **\ 애플리케이션 객체가 생성된 다음에\ ** 뷰 모듈을 임포트 해야 한다. "

#: ../../patterns/packages.rst:90
msgid "Here's an example :file:`__init__.py`::"
msgstr "다음은 :file:`__init__.py` 파일의 예이다.::"

#: ../../patterns/packages.rst:97
msgid "And this is what :file:`views.py` would look like::"
msgstr "그리고 :file:`views.py` 파일은 다음과 같아야 한다.::"

#: ../../patterns/packages.rst:120
msgid "Circular Imports"
msgstr "순환 임포트"

#: ../../patterns/packages.rst:122
msgid ""
"Every Python programmer hates them, and yet we just added some: circular "
"imports (That's when two modules depend on each other.  In this case "
":file:`views.py` depends on :file:`__init__.py`).  Be advised that this "
"is a bad idea in general but here it is actually fine.  The reason for "
"this is that we are not actually using the views in :file:`__init__.py` "
"and just ensuring the module is imported and we are doing that at the "
"bottom of the file."
msgstr ""
"대부분의 파이썬 프로그래머가 순환 임포트(2개의 모듈이 서로를 임포트하는 것, "
"이 경우에는 :file:`views.py` 파일과 :file:`__init__.py` 파일)를 "
"싫어하기 때문에 한마디 남긴다. 일반적으로 순환 임포트는 안좋은 생각이다. "
"하지만 이 경우에는 괜찮다. 실제로 :file:`__init__.py` 파일 내에서 뷰를 "
"사용하지는 않기 때문이다. 뷰 모듈이 임포되기만 하면 되므로 가장 아래에 "
"코드를 넣었다."

#: ../../patterns/packages.rst:130
msgid ""
"There are still some problems with that approach but if you want to use "
"decorators there is no way around that.  Check out the :ref:`becomingbig`"
" section for some inspiration how to deal with that."
msgstr ""
"물론 이 방식에는 여전히 몇가지 문제가 있다. 하지만 데코레이터를 쓰려면 "
"이 방법밖에는 없다. 이 문제에 대해서는 :ref:`becomingbig` 절을 참조한다. "

#: ../../patterns/packages.rst:138
msgid "Working with Blueprints"
msgstr "블루프린트 사용"

#: ../../patterns/packages.rst:140
msgid ""
"If you have larger applications it's recommended to divide them into "
"smaller groups where each group is implemented with the help of a "
"blueprint.  For a gentle introduction into this topic refer to the "
":ref:`blueprints` chapter of the documentation."
msgstr ""
"만약 더 큰 애플리케이션을 만든다면 몇 개의 더 작은 그룹으로 나누어 "
"각각의 그룹을 블루프린트로 구현하는 것을 추천한다. "
"이 주제에 대해서는 :ref:`blueprints` 절을 참조한다."
